function varargout = twotoneCW(varargin)
% twotoneCW()
% 
% Twotone TIRF-FRET image analysis software.
% Version 3.1.0, released 110426
% Authors: Seamus J Holden, Stephan Uphoff
% Email: s.holden1@physics.ox.ac.uk
% Copyright (C) 2010, Isis Innovation Limited.
% All rights reserved.
% TwoTone is released under an “academic use only” license; for details please see the accompanying ‘TWOTONE_LICENSE.doc’. Usage of the software requires acceptance of this license
%
% FUNCTION: twotoneCW
% DESCRIPTION: GUI-based analysis of CW TIRF-FRET data


% menuEdit the above text to modify the response to help twotoneCW

% Last Modified by GUIDE v2.5 12-Nov-2010 13:24:40
%
%%%%%%%%%%%%%%%%%%%
% DONE: Autodetect in each channel
% 080804 SH all essential code completed except save function
%
%
% Autogenerated Code + Links to guiMain
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @twotoneCW_OpeningFcn, ...
                   'gui_OutputFcn',  @twotoneCW_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT MENUEDIT


% --- Executes just before twotoneCW is made visible.
function twotoneCW_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to a figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to twotoneCW (see VARARGIN)

% Choose default command line output for twotoneCW
handles.output = hObject;
% use guiMain to initialise appData
guiMain('init',handles, varargin);
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes twotoneCW wait for user response (see UIRESUME)
% uiwait(handles.figure1);

% --- Outputs from this function are returned to the command line.
function varargout = twotoneCW_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);

% Get default command line output from handles structure
varargout{1} = handles.output;

%------------------------------------------------------------------------
%%% callbacks %%%
%------------------------------------------------------------------------
function editThreshD_Callback(hObject, eventdata, handles)
guiMain('editThreshD_Callback', handles);

function editThreshA_Callback(hObject, eventdata, handles)
guiMain('editThreshA_Callback', handles);

function pushbuttonAutoDetectD_Callback(hObject, eventdata, handles)
guiMain('pushbuttonAutoDetectD_Callback', handles);

function pushbuttonAutoDetectA_Callback(hObject, eventdata, handles)
guiMain('pushbuttonAutoDetectA_Callback', handles);

function popupmenuSelectChannels_Callback(hObject, eventdata, handles)
guiMain('popupmenuSelectChannels_Callback', handles);

function pushbuttonAssociateChannels_Callback(hObject, eventdata, handles)
guiMain('pushbuttonAssociateChannels_Callback', handles);

function pushbuttonReset_Callback(hObject, eventdata, handles)
guiMain('pushbuttonReset_Callback', handles);

function menuLoadMovie_Callback(hObject, eventdata, handles)
guiMain('menuLoadMovie_Callback', handles);

function menuExit_Callback(hObject, eventdata, handles)
guiMain('menuExit_Callback', handles);

function editClusterThresh_Callback(hObject, eventdata, handles)
guiMain('editClusterThresh_Callback', handles);

function pushbuttonClearD_Callback(hObject, eventdata, handles)
guiMain('pushbuttonClearD_Callback', handles);

function pushbuttonClearA_Callback(hObject, eventdata, handles)
guiMain('pushbuttonClearA_Callback', handles);

function menuLoadTFORM_Callback(hObject, eventdata, handles)
guiMain('menuLoadTFORM_Callback', handles);


function pushbuttonLoadConfig_Callback(hObject, eventdata, handles)
guiMain('pushbuttonLoadConfig_Callback', handles);

function menuSaveSettings_Callback(hObject, eventdata, handles)
guiMain('menuSaveSettings_Callback', handles);

function menuLoadSettings_Callback(hObject, eventdata, handles)
guiMain('menuLoadSettings_Callback', handles);

function editNNlim_Callback(hObject, eventdata, handles)
guiMain('editNNlim_Callback', handles);

function checkboxEllipticityLim_Callback(hObject, eventdata, handles)
guiMain('checkboxEllipticityLim_Callback', handles);

function checkboxSigmaLim_Callback(hObject, eventdata, handles)
guiMain('checkboxSigmaLim_Callback', handles);

function checkboxNNlim_Callback(hObject, eventdata, handles)
guiMain('checkboxNNlim_Callback', handles);

function editSaveDataAppendString_Callback(hObject, eventdata, handles)
guiMain('editSaveDataAppendString_Callback', handles);

function menuSettings_Callback(hObject, eventdata, handles)
guiMain('menuSettings_Callback', handles);

function editSigmaMin_Callback(hObject, eventdata, handles)
guiMain('editSigmaMin_Callback', handles);

function editEccMin_Callback(hObject, eventdata, handles)
guiMain('editEccMin_Callback', handles);

function editEccentricityMax_Callback(hObject, eventdata, handles)
guiMain('editEllipticityMax_Callback', handles);

function editSigmaMax_Callback(hObject, eventdata, handles)
guiMain('editSigmaMax_Callback', handles);

function menuClearTFORM_Callback(hObject, eventdata, handles)
guiMain('pushbuttonClearTFORM_Callback', handles);

function menuSaveSettingsAsDefault_Callback(hObject, eventdata, handles)
guiMain('menuSaveSettingsAsDefault_Callback', handles);

function menuSaveSettingsAs_Callback(hObject, eventdata, handles)
guiMain('menuSaveSettingsAs_Callback', handles);

function checkboxShowFilteredImage_Callback(hObject, eventdata, handles)
guiMain('checkboxShowFilteredImage', handles);

function pushbuttonRunTwotone_Callback(hObject, eventdata, handles)
guiMain('pushbuttonRunTwotone_Callback', handles);

function menuEdit_Callback(hObject, eventdata, handles)

function menuFile_Callback(hObject, eventdata, handles)

function checkboxConvertToText_Callback(hObject, eventdata, handles)
guiMain('checkboxConvertToText_Callback', handles);

function checkboxConvertToTwotoneOldVersion_Callback(hObject, eventdata, handles)
guiMain('checkboxConvertToTwotoneOldVersion_Callback', handles);

%------------------------------------------------------------------------
%%% Close request Functions %%%%
%------------------------------------------------------------------------
function figure1_CloseRequestFcn(hObject, eventdata, handles)
guiMain('menuExit_Callback', handles);

%------------------------------------------------------------------------
%%% Create Functions %%%%
%------------------------------------------------------------------------
function editThreshD_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editThreshA_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function popupmenuSelectChannels_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editClusterThresh_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editNNlim_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editSaveDataAppendString_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editSigmaMin_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editEccMin_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editEccentricityMax_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editSigmaMax_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%------------------------------------------------------------------------
%--------application specific code 
function guiMain(param, handles,varargin)
% function guiMain(param, handles)
% ----------Main control function ---------------------------------------

if strcmp(param, 'init') % on initialise, create the appData variable & initialise fields

  %set the appData parameters
  appData.quitNow = false;  % check this at the end of each loop.
  appData.defaultConfigFile = 'twotoneDefaultSettings_CW.mat'; 
  appData.isALEX   = 0;
  appData.init          = true;
  appData.movieLoaded   = false;
  appData.savedAlready  = false; % user has not already tried to save data
  appData.showFilteredImage = false; % by default show the raw image
  set(handles.checkboxShowFilteredImage,'Value',appData.showFilteredImage);
  appData.currentConfigSearchPath = pwd; %set the default search path for autoDetect config files
  appData.pointsD = zeros(0,6);
  appData.pointsA = zeros(0,6);
  appData.TFORM = [];
  appData.currentImSize=[NaN, NaN];
  
  %load twotone menusettings
  if exist(twotoneInstallDir('',appData.defaultConfigFile),'file')
    load(twotoneInstallDir('',appData.defaultConfigFile),'twotoneData');
  else % create a new default file
    initializeTwotoneSetting('CWonly')
    load(twotoneInstallDir('',appData.defaultConfigFile),'twotoneData');
  end

  %load twotone fit options
  if exist(twotoneInstallDir('','twotoneGeneralSetting.mat'),'file')
    load(twotoneInstallDir('','twotoneGeneralSetting.mat'),'twotoneGeneralSetting');
  else % create a new default file
    initializeTwotoneSetting('algSettingOnly')
    load(twotoneInstallDir('','twotoneGeneralSetting.mat'),'twotoneGeneralSetting');
  end

  %set the parameters in the gui boxes
  appData.DCh =find(strcmp(twotoneData.settings.imageSettings.aDetChannelName,'D'));
  appData.ACh =find(strcmp(twotoneData.settings.imageSettings.aDetChannelName,'A'));
  set(handles.editThreshD,'String',num2str(twotoneData.settings.autoDetectSettings.thresholds(appData.DCh)));
  set(handles.editThreshA,'String',num2str(twotoneData.settings.autoDetectSettings.thresholds(appData.ACh)));

  set(handles.editClusterThresh,'String',num2str(twotoneData.settings.autoDetectSettings.clusterDistanceThresh));
  %sort out the inter channel transform
  if twotoneData.settings.transformMatrixSettings.applyTform == 0
    set(handles.textTFORMfilename,'String',''); 
  else
    set(handles.textTFORMfilename,'String',twotoneData.settings.transformMatrixSettings.fileName ); % we will load it in just a second
  end

  set(handles.checkboxNNlim,'Value', twotoneData.settings.autoDetectSettings.nearestNeighbor.apply);
  set(handles.checkboxNNlim,'Value', twotoneData.settings.autoDetectSettings.ellipticity.apply);
  set(handles.checkboxSigmaLim,'Value',twotoneData.settings.autoDetectSettings.PSFwidth.apply);
  set(handles.editNNlim,'String',num2str(twotoneData.settings.autoDetectSettings.nearestNeighbor.thresh));
  set(handles.editEccentricityMax,'String',num2str(twotoneData.settings.autoDetectSettings.ellipticity.thresh));
  set(handles.editSigmaMin,'String',num2str(twotoneData.settings.autoDetectSettings.PSFwidth.lim(1)));
  set(handles.editSigmaMax,'String',num2str(twotoneData.settings.autoDetectSettings.PSFwidth.lim(2)));
  set(handles.popupmenuSelectChannels,'String',twotoneGeneralSetting.linkageFilterOpts_CW);
  currentChNo = find(strcmp(twotoneGeneralSetting.linkageFilterOpts_CW,twotoneData.settings.autoDetectSettings.linkageFilter));
  set(handles.popupmenuSelectChannels,'Value',currentChNo);

  set(handles.checkboxConvertToText,'Value',twotoneGeneralSetting.outputTwotoneTextData);
  set(handles.checkboxConvertToTwotoneOldVersion,'Value',twotoneGeneralSetting.outputOldTwotoneFormat);

  % handles.figure1 is the handle for the base figure,
  % set the app data to this, then its all editable &
  % persistent
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
  
  %load the tform if required
  if twotoneData.settings.transformMatrixSettings.applyTform == 1
    tformPath = twotoneData.settings.transformMatrixSettings.fileName{1};
    if exist(tformPath,'file')
      set(handles.textTFORMfilename,'String',twotoneData.settings.transformMatrixSettings.fileName ); 
      tformData = load(tformPath); %Load the TFORM - loads it first as a structure
      appData.TFORM = tformData.TFORM;
    else
      warning('Specified TFORM not found; no TFORM loaded');
      twotoneData.settings.transformMatrixSettings.applyTform = 0
      appData.TFORM = [];
      twotoneData.settings.transformMatrixSettings.fileName = {''};
      set(handles.textTFORMfilename,'String',''); 
    end
  end

else  % subsequent runs, retrieve appData
  if isappdata(handles.figure1, 'appData')
    appData = getappdata(handles.figure1, 'appData');
    twotoneData = getappdata(handles.figure1, 'twotoneData');
    twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
  else 
    error('appData, main data variable structure for avgGui not initialised');
  end
end

switch param 
case   'menuLoadMovie_Callback'

  %Load the movie
  % get the file path
  [filename,pathname] = uigetfile({'*.fits;*.tif'}); 

  if ~(isnumeric(filename)&&filename==0) %check the user has not pressed cancel
    appData.movieName = filename;
    appData.moviePath = strcat( pathname,filename);
    
    % movie is CW
    firstGreenFrame = 0;
    appData.firstGreenFrame = firstGreenFrame;
    
    %load the movie
    waitHandle = waitbar(0,'Loading Movie...',  'WindowStyle','modal');
    appData.tirfIm = TirfImage(appData.moviePath,firstGreenFrame,twotoneData.settings.imageSettings.channelImageLim);

    close(waitHandle);
    appData.movieLoaded = true;
    appData.savedAlready = false;
    tempGreenStack = getGreenStack(appData.tirfIm);
    appData.numFrames = getNumFrames(tempGreenStack);
    %X axis is NAXIS2. Y axis is NAXIS1.
    appData.currentImSize=[double(getNAXIS1(tempGreenStack)), double(getNAXIS2(tempGreenStack))];
    %appData.imType = getImType(tempGreenStack); %assume both green and red images are of same class
    clear tempGreenStack;  

    %check the supplied image limits are within bounds
    if ~isImageLimitOK(twotoneData.settings.imageSettings.channelImageLim, appData.currentImSize)
      warndlg('Supplied image limits exceed the bounds of the image, using whole image!');
    end
  
    %Load Display Info
    set(handles.textCurrentFile,'String', appData.movieName);
    set(handles.textNumberOfFrames, 'String', num2str(appData.numFrames));

    % (assumes more than 1 frame but
    % (TODO: AD CHECKS THAT THE MOVIE IS LONG ENOUGH
    % AND IS ALTERNATING) 
    %update averages
    setappdata(handles.figure1, 'appData', appData);
    setappdata(handles.figure1, 'twotoneData', twotoneData);
    setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
    updateAverages(handles);
    appData = getappdata(handles.figure1, 'appData');
    twotoneData = getappdata(handles.figure1, 'twotoneData');
    twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

    %update filters
    setappdata(handles.figure1, 'appData', appData);
    setappdata(handles.figure1, 'twotoneData', twotoneData);
    setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
    updateFilters(handles);
    appData = getappdata(handles.figure1, 'appData');
    twotoneData = getappdata(handles.figure1, 'twotoneData');
    twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
    
    appData.pointsD =zeros(0,6);
    appData.pointsA =zeros(0,6);
        
    %plot the data
    setappdata(handles.figure1, 'appData', appData);
    setappdata(handles.figure1, 'twotoneData', twotoneData);
    setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
    plotImages(handles);
    appData = getappdata(handles.figure1, 'appData');
    twotoneData = getappdata(handles.figure1, 'twotoneData');
    twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');


        
  end  
case  'menuLoadTFORM_Callback'
  [tformFilename,tformPathname] = uigetfile({'*.tform.mat'; '*.*'});
  
  if ~(isnumeric(tformFilename)&&tformFilename==0) %check the user has not pressed cancel

    tformPath = strcat(tformPathname,tformFilename);
    tformData = load(tformPath); %Load the TFORM - loads it first as a structure

    % save all the information
    appData.TFORM = tformData.TFORM;
    twotoneData.settings.transformMatrixSettings.applyTform = 1;
    twotoneData.settings.transformMatrixSettings.fileName = {tformFilename};
    %update the tform label
    set(handles.textTFORMfilename,'String',twotoneData.settings.transformMatrixSettings.fileName ); 
  end
case   'pushbuttonClearTFORM_Callback'
  % get rid of the transform file
  appData.TFORM = [];
  twotoneData.settings.transformMatrixSettings.fileName = {''};
  twotoneData.settings.transformMatrixSettings.applyTform = 0;
  %update the tform label
  set(handles.textTFORMfilename,'String',twotoneData.settings.transformMatrixSettings.fileName ); 
case  'menuExit_Callback'
  %on quitting twotoneCW
  choice =questdlg('Are you sure you want to exit TwoTone?','AutoDetectGui', 'OK', 'Cancel','OK');
  %uiwait(h);
  if strcmp(choice,'OK')
    appData.quitNow =true;
  end

case  'pushbuttonAutoDetectD_Callback'
  if appData.movieLoaded == true     
    
    DImFilt = appData.DFiltered;
    DIm = appData.D;
    
    threshD = twotoneData.settings.autoDetectSettings.thresholds(appData.DCh);
    BPdiscDiametre = twotoneData.settings.autoDetectSettings.bandPassKernelDiameter;
    WindowSize = twotoneData.settings.autoDetectSettings.fitSubImageRadius;
    pointsD = findpeaks3(DImFilt,DIm, threshD, BPdiscDiametre,WindowSize);
    if numel(pointsD)>0
      appData.pointsD = pointsD;      
      %plot the data
      setappdata(handles.figure1, 'appData', appData);
      setappdata(handles.figure1, 'twotoneData', twotoneData);
      setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
      plotImages(handles);
      appData = getappdata(handles.figure1, 'appData');
      twotoneData = getappdata(handles.figure1, 'twotoneData');
      twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
    end

  end
case  'pushbuttonAutoDetectA_Callback'
  if appData.movieLoaded == true     
    
    %Retrive the images
    AImFilt = appData.AFiltered;
    AIm = appData.A;

    threshA = twotoneData.settings.autoDetectSettings.thresholds(appData.ACh);
    BPdiscDiametre = twotoneData.settings.autoDetectSettings.bandPassKernelDiameter;
    WindowSize = twotoneData.settings.autoDetectSettings.fitSubImageRadius;
    pointsA = findpeaks3(AImFilt,AIm, threshA, BPdiscDiametre,WindowSize);
    
    if numel(pointsA)>0
      appData.pointsA = pointsA;
      %plot the data
      setappdata(handles.figure1, 'appData', appData);
      setappdata(handles.figure1, 'twotoneData', twotoneData);
      setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
      plotImages(handles);
      appData = getappdata(handles.figure1, 'appData');
      twotoneData = getappdata(handles.figure1, 'twotoneData');
      twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
    end


  end
case  'popupmenuSelectChannels_Callback'
  % set the channels for point association
  selectChannelString = get(handles.popupmenuSelectChannels,'String');
  selectChannelValue = get(handles.popupmenuSelectChannels,'Value');
  twotoneData.settings.autoDetectSettings.linkageFilter = selectChannelString(selectChannelValue);

case  'pushbuttonAssociateChannels_Callback'

  % TODO: if the positions have not been updated then i shouldnt
  % bother running associateCWchannels unnecessarily (but only saves 0.7s)
  if appData.movieLoaded == true     
    
    % Retrive the point positions
    % (check there is at least 1 point position first)
    if ~( isempty(appData.pointsD) && isempty(appData.pointsA) )
      
      % get the point positions
      pointsD = appData.pointsD;     
      pointsA = appData.pointsA;     

      %get the search radii
      clusterThresh = twotoneData.settings.autoDetectSettings.clusterDistanceThresh;

      selectChannel = twotoneData.settings.autoDetectSettings.linkageFilter;
      %setup the TFORM argument to associateCWchannels 
      % want to pass the TFORM if its supplied
      if twotoneData.settings.transformMatrixSettings.applyTform ~= 0
        tformArgs = {appData.TFORM};
      else
        tformArgs = {};
      end

      paramNames = {'amplitude','sx','sy','eccentricity'};  
      D = pointsD(:,1:2);
      Dparams = pointsD(:,3:end);
      A = pointsA(:,1:2);
      Aparams = pointsA(:,3:end);

      %TFORM argument is only supplied if it has been selected
      [appData.filteredClusters, dummyVar, appData.distanceDistribution] = associateCWchannels(D,A, clusterThresh,Dparams,Aparams,paramNames,selectChannel, tformArgs{:});
      %plot the cluster distance distribution
      if ~isempty(appData.filteredClusters)
        if isfield(appData,'clusterHandle')
          set(0,'CurrentFigure',appData.clusterHandle);
        else
          appData.clusterHandle = figure;
          set(appData.clusterHandle, 'CloseRequestFcn',@(hObject, eventdata) figure1_CloseRequestFcn(hObject, eventdata, handles));
          set(appData.clusterHandle, 'Name','Linking algorithm results','NumberTitle','off');
        end
        plotClusterResults(appData.filteredClusters,appData.distanceDistribution);
      end
      %link the closing of the cluster figure to the main gui
      set(0,'CurrentFigure',handles.figure1 );

      %get the filter parameter inputs
      filterInputParams.applyNN               = twotoneData.settings.autoDetectSettings.nearestNeighbor.apply; 
      filterInputParams.applyEccentricity     = twotoneData.settings.autoDetectSettings.ellipticity.apply;
      filterInputParams.applySigma            = twotoneData.settings.autoDetectSettings.PSFwidth.apply;
      filterInputParams.NNlim                 = twotoneData.settings.autoDetectSettings.nearestNeighbor.thresh;
      filterInputParams.eccLim                = twotoneData.settings.autoDetectSettings.ellipticity.thresh;
      filterInputParams.sigmaLim              = twotoneData.settings.autoDetectSettings.PSFwidth.lim;

      %filter the positions based on the input parameters
      [appData.filteredClusters, appData.Dlinkedpos , appData.Alinkedpos] = ...
        filterLinkedDataCW(appData.filteredClusters, filterInputParams);
      %plot the data
      setappdata(handles.figure1, 'appData', appData);
      setappdata(handles.figure1, 'twotoneData', twotoneData);
      setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
      plotImages(handles);
      appData = getappdata(handles.figure1, 'appData');
    twotoneData = getappdata(handles.figure1, 'twotoneData');
    twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
    end

  end
case  'pushbuttonReset_Callback'
  if isfield(appData,'filteredClusters')
    % get rid of the plotted linked positions
    if isfield(appData, 'handleFilteredD')
      set(appData.handleFilteredD, 'Visible', 'off');
      appData = rmfield(appData,'handleFilteredD');
    end
    if isfield(appData, 'handleFilteredA')
      set(appData.handleFilteredA, 'Visible', 'off');
      appData = rmfield(appData,'handleFilteredA');
    end
    
    appData = rmfield(appData,'filteredClusters');

  end

%update text box cases:
case  'editThreshD_Callback'
  threshD=  str2double(get(handles.editThreshD,'String'));
  %Check is valid
  if isnan(threshD)... % is not a number
     || (threshD < 0) || (threshD > 65535)
    %dont update and thow a warning
    h = warndlg(' 0  <= threshD <= 65535');
    uiwait(h);
else 
    twotoneData.settings.autoDetectSettings.thresholds(appData.DCh)= threshD;
  end

case  'editThreshA_Callback'
  threshA=  str2double(get(handles.editThreshA,'String'));
  %Check is valid
  if isnan(threshA)... % is not a number
     || (threshA < 0) || (threshA > 65535)
    %dont update and thow a warning
    h = warndlg(' 0  <= threshA <= 65535');
    uiwait(h);
  else 
    twotoneData.settings.autoDetectSettings.thresholds(appData.ACh)= threshA;
  end
case  'editClusterThresh_Callback'
  clusterThresh = str2double(get(handles.editClusterThresh,'String'));
  %Check is valid
  if isnan(clusterThresh)... % is not a number
     || ~(clusterThresh> 0) 
    %dont update and thow a warning
    h = warndlg('clusterThresh> 0');
    uiwait(h);
  else 
    twotoneData.settings.autoDetectSettings.clusterDistanceThresh = clusterThresh;
  end
case  'pushbuttonClearD_Callback'
  %get rid of any points already plotted and located
  if isfield(appData, 'pointsD')
    appData.pointsD = zeros(0,6);
  end
  %plot the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
  plotImages(handles);
  appData = getappdata(handles.figure1, 'appData');
  twotoneData = getappdata(handles.figure1, 'twotoneData');
  twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

case  'pushbuttonClearA_Callback'
  %get rid of any points already plotted and located
  if isfield(appData, 'pointsA')
    appData.pointsA = zeros(0,6);
  end
  %plot the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
  plotImages(handles);
  appData = getappdata(handles.figure1, 'appData');
  twotoneData = getappdata(handles.figure1, 'twotoneData');
  twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

case {'menuLoadSettings_Callback'}
  
  %Load the movie
  % get the file path
  [filename,pathname] = uigetfile({'*.mat'}, ... 
          'Select configuration file', appData.currentConfigSearchPath); 
    
  if ~(isnumeric(filename)&&filename==0) %check the user has not pressed cancel
    
    %update the config seach path
    appData.currentConfigSearchPath = pathname;

    %load the config
    path1 = strcat( pathname,filename);
    twotoneDataOld = twotoneData;
    load(path1, 'twotoneData','twotoneGeneralSetting');
    if twotoneData.settings.imageSettings.alternationPeriod ~= 1
      %dont update and thow a warning
      h = warndlg('The loaded config file is not for 2-color CW data, reverting to previous settings.');
      uiwait(h);
      twotoneData = twotoneDataOld;
    end

    %set the parameters in the gui boxes
    appData.DCh =find(strcmp(twotoneData.settings.imageSettings.aDetChannelName,'D'));
    appData.ACh =find(strcmp(twotoneData.settings.imageSettings.aDetChannelName,'A'));
    set(handles.editThreshD,'String',num2str(twotoneData.settings.autoDetectSettings.thresholds(appData.DCh)));
    set(handles.editThreshA,'String',num2str(twotoneData.settings.autoDetectSettings.thresholds(appData.ACh)));

    set(handles.editClusterThresh,'String',num2str(twotoneData.settings.autoDetectSettings.clusterDistanceThresh));
    %sort out the inter channel transform
    if twotoneData.settings.transformMatrixSettings.applyTform == 0
      set(handles.textTFORMfilename,'String',''); 
    else
      tformPath = twotoneData.settings.transformMatrixSettings.fileName{1};
      if exist(tformPath,'file')
	set(handles.textTFORMfilename,'String',tformPath); 
	tformData = load(tformPath); %Load the TFORM - loads it first as a structure
	appData.TFORM = tformData.TFORM;
      else
	warning('TFORM file not found. No tform loaded.');
	 % get rid of the transform file
	appData.TFORM = [];
        twotoneData.settings.transformMatrixSettings.fileName = {''};
        twotoneData.settings.transformMatrixSettings.applyTform = 0;
        %update the tform label
        set(handles.textTFORMfilename,'String',twotoneData.settings.transformMatrixSettings.fileName ); 
      end
    end

    set(handles.checkboxNNlim,'Value', twotoneData.settings.autoDetectSettings.nearestNeighbor.apply);
    set(handles.checkboxNNlim,'Value', twotoneData.settings.autoDetectSettings.ellipticity.apply);
    set(handles.checkboxSigmaLim,'Value',twotoneData.settings.autoDetectSettings.PSFwidth.apply);
    set(handles.editNNlim,'String',num2str(twotoneData.settings.autoDetectSettings.nearestNeighbor.thresh));
    set(handles.editEccentricityMax,'String',num2str(twotoneData.settings.autoDetectSettings.ellipticity.thresh));
    set(handles.editSigmaMin,'String',num2str(twotoneData.settings.autoDetectSettings.PSFwidth.lim(1)));
    set(handles.editSigmaMax,'String',num2str(twotoneData.settings.autoDetectSettings.PSFwidth.lim(2)));
    set(handles.popupmenuSelectChannels,'String',twotoneGeneralSetting.linkageFilterOpts_CW);
    set(handles.checkboxConvertToText,'Value',twotoneGeneralSetting.outputTwotoneTextData);
    set(handles.checkboxConvertToTwotoneOldVersion,'Value',twotoneGeneralSetting.outputOldTwotoneFormat);
    
    currentChNo = find(strcmp(twotoneGeneralSetting.linkageFilterOpts_CW,twotoneData.settings.autoDetectSettings.linkageFilter));
    set(handles.popupmenuSelectChannels,'Value',currentChNo);

    %update variables
    setappdata(handles.figure1, 'appData', appData);
    setappdata(handles.figure1, 'twotoneData', twotoneData);
    setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);

    %plot the data
    if appData.movieLoaded == true
      updateFilters(handles);
      plotImages(handles);
      appData = getappdata(handles.figure1, 'appData');
      twotoneData = getappdata(handles.figure1, 'twotoneData');
      twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
    end
  end
case { 'menuSaveSettingsAsDefault_Callback'}
  %save the config
  save(twotoneInstallDir('',appData.defaultConfigFile), 'twotoneData');
  save(twotoneInstallDir('','twotoneGeneralSetting.mat'),'twotoneGeneralSetting');
case { 'menuSaveSettings_Callback'}
  if appData.savedAlready == false % if no previous file saved
    % run the save particles as callback
    guiMain('menuSaveSettingsAs_Callback', handles);
  else
    %save the config
    save(appData.savePath, 'twotoneData','twotoneGeneralSetting');
  end

case { 'menuSaveSettingsAs_Callback'}
  %get the filename
  [filename,pathname, filterindex] = uiputfile({'*.mat'});

  if filterindex ~= 0 %check the user has not pressed cancel
    savePath = strcat( pathname,filename);
    % make sure the file has the right ending
    if numel(savePath)>4 strcmp(savePath(end-3:end),'.mat')
      savePath = savePath(1:end-4);
    end
    savePath = strcat(savePath, '.mat');
    %save the config
    save(savePath, 'twotoneData','twotoneGeneralSetting');
    appData.savePath = savePath;
    setappdata(handles.figure1, 'appData', appData);
  end  
case 'editNNlim_Callback'
  twotoneData.settings.autoDetectSettings.nearestNeighbor.thresh =  str2num(get(handles.editNNlim,'String'));
  %update the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);

case 'checkboxNNlim_Callback'
  twotoneData.settings.autoDetectSettings.nearestNeighbor.apply= get(handles.checkboxNNlim,'Value');
  %update the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
case 'checkboxSigmaLim_Callback'
  twotoneData.settings.autoDetectSettings.PSFwidth.apply= get(handles.checkboxSigmaLim,'Value');
  %update the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
case 'checkboxEllipticityLim_Callback'
  twotoneData.settings.autoDetectSettings.ellipticity.apply = get(handles.checkboxEllipticityLim,'Value');
  %update the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
case 'menuSettings_Callback'
  %update the current menusettings
  twotoneDataOld = twotoneData;
  twotoneGeneralSettingOld = twotoneGeneralSetting;
  [twotoneData twotoneGeneralSetting] = twotoneSettingsGui(twotoneData, twotoneGeneralSetting,appData.currentImSize); 
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
  %update the filter limit edit boxes (paramters that may have changed during autoGenerateFitParam)
  set(handles.editSigmaMin,'String', num2str(twotoneData.settings.autoDetectSettings.PSFwidth.lim(1)));
  set(handles.editSigmaMax,'String', num2str(twotoneData.settings.autoDetectSettings.PSFwidth.lim(2)));
  set(handles.editNNlim,   'String', num2str(twotoneData.settings.autoDetectSettings.nearestNeighbor.thresh));

    %----------update the data and replot the images if a movie is already loaded
  if appData.movieLoaded == true
    %check whether we need to reload the movie
    imageLimDiff = twotoneDataOld.settings.imageSettings.channelImageLim- twotoneData.settings.imageSettings.channelImageLim;
    bpassIsChanged = (twotoneDataOld.settings.autoDetectSettings.bandPassKernelDiameter ~=twotoneData.settings.autoDetectSettings.bandPassKernelDiameter);
    if any( imageLimDiff(:) ~=0) || bpassIsChanged %ie if any of them have changed
      firstGreenFrame = 0;
      appData.firstGreenFrame = firstGreenFrame;
      
      %load the movie
      waitHandle = waitbar(0,'Loading Movie...',  'WindowStyle','modal');
      appData.tirfIm = TirfImage(appData.moviePath,firstGreenFrame, twotoneData.settings.imageSettings.channelImageLim);

      close(waitHandle);
      appData.movieLoaded = true;
      appData.savedAlready = false;
      tempGreenStack = getGreenStack(appData.tirfIm);
      appData.numFrames = getNumFrames(tempGreenStack);
      %appData.imType = getImType(tempGreenStack); %assume both green and red images are of same class
      clear tempGreenStack;  

      %check the supplied image limits are within bounds
      if ~isImageLimitOK(twotoneData.settings.imageSettings.channelImageLim, appData.currentImSize)
	warndlg('Supplied image limits exceed the bounds of the image, using whole image!');
      end
  
      %Load Display Info
      set(handles.textCurrentFile,'String', appData.movieName);
      set(handles.textNumberOfFrames, 'String', num2str(appData.numFrames));
      %update appdata
      setappdata(handles.figure1, 'appData', appData);
      setappdata(handles.figure1, 'twotoneData', twotoneData);
      setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);

      %update averages
      updateAverages(handles);
      appData = getappdata(handles.figure1, 'appData');
      twotoneData = getappdata(handles.figure1, 'twotoneData');
      twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

      %update filters
      setappdata(handles.figure1, 'appData', appData);
      setappdata(handles.figure1, 'twotoneData', twotoneData);
      setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
      updateFilters(handles);
      appData = getappdata(handles.figure1, 'appData');
      twotoneData = getappdata(handles.figure1, 'twotoneData');
      twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
      
      %reset the detected particles  
      appData.pointsD =zeros(0,6);
      appData.pointsA =zeros(0,6);
      if isfield(appData,'filteredClusters')
	appData = rmfield(appData,'filteredClusters');
      end

      %plot the data
      setappdata(handles.figure1, 'appData', appData);
      setappdata(handles.figure1, 'twotoneData', twotoneData);
      setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
      plotImages(handles);
      appData = getappdata(handles.figure1, 'appData');
      twotoneData = getappdata(handles.figure1, 'twotoneData');
      twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
      setappdata(handles.figure1, 'appData', appData);
      setappdata(handles.figure1, 'twotoneData', twotoneData);
      setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
    end
   end
case 'editSigmaMin_Callback'
  twotoneData.settings.autoDetectSettings.PSFwidth.lim(1) = str2num(get(handles.editSigmaMin,'String'));
  %update the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
case 'editSigmaMax_Callback'
  twotoneData.settings.autoDetectSettings.PSFwidth.lim(2) = str2num(get(handles.editSigmaMax,'String'));
  %update the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
case 'editEllipticityMax_Callback'
  twotoneData.settings.autoDetectSettings.ellipticity.thresh = str2num(get(handles.editEccentricityMax,'String'));
  %update the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
case 'checkboxShowFilteredImage'
  appData.showFilteredImage = get(handles.checkboxShowFilteredImage,'Value');

  %plot the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
  plotImages(handles);
  appData = getappdata(handles.figure1, 'appData');
  twotoneData = getappdata(handles.figure1, 'twotoneData');
  twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
case 'pushbuttonRunTwotone_Callback'
  %Load the movie
  % get the file path
  [filename,pathname] = uigetfile({'*.fits;*.tif'}, ... 
          'Select movies for analysis','MultiSelect','on'); 
    
  if ~(isnumeric(filename)&&filename==0) %check the user has not pressed cancel
    %change to analysis directory
    startdir = pwd;
    cd(pathname)
    try
      % save the current twotoneConf
      confFileName = ['twotoneConf.',datestr(now,'yymmd'),'.mat'];
      save(confFileName,'twotoneData');
      %run robotone
      twotoneCMD(filename,confFileName,'OutputTextData',twotoneGeneralSetting.outputTwotoneTextData,'OutputTwotoneOldFormat',twotoneGeneralSetting.outputOldTwotoneFormat);
      %return to original directory
      cd(startdir);
    catch ME
      cd(startdir); %return to original directory before crashing
      rethrow(ME);
    end
  end
case 'checkboxConvertToText_Callback'
  twotoneGeneralSetting.outputTwotoneTextData = get(handles.checkboxConvertToText,'Value');
case 'checkboxConvertToTwotoneOldVersion_Callback'
  twotoneGeneralSetting.outputOldTwotoneFormat = get(handles.checkboxConvertToTwotoneOldVersion,'Value');
end

%update setappdata
setappdata(handles.figure1, 'appData', appData);
setappdata(handles.figure1, 'twotoneData', twotoneData);
setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
%update the old guidata handles with the new one
% for some reason you have to reference it as handles.figure1
% not entirely sure why
guidata(handles.figure1, handles);

%check if its time to quit the program
if appData.quitNow ==true
  %if its plotted, close the clusters plot
  if isfield(appData,'clusterHandle')
    delete(appData.clusterHandle);
  end
  %uiresume;
  delete(handles.figure1);
end
  
%---------------------------------------------------------
function updateAverages(handles)

% calculate the average images and update them
appData = getappdata(handles.figure1, 'appData');
twotoneData = getappdata(handles.figure1, 'twotoneData');
twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

firstGreenFrame = appData.firstGreenFrame;
numFrames = appData.numFrames;

% get the current avgFirstLastVals from the menuedit boxes
avgFirst = twotoneData.settings.autoDetectSettings.averageFrameLim(1); 
avgLast  = twotoneData.settings.autoDetectSettings.averageFrameLim(2);

% check they are sensible
if isnan(avgFirst) || isnan(avgLast)... % is not a number
   || rem(avgFirst, 1)~=0 || rem(avgLast,1)~=0 ... % is not integer
   || (avgFirst >= avgLast ) ... 
   || (avgLast < 2)
  %dont update and thow a warning
  h = warndlg('Start frame must be < End Frame, Start Frame > 0, End Frame > 1,Both integers and < MovieLength');
  uiwait(h);
else
  %update and replot
  
  %make sure the params arent out of bounds
  if avgFirst < 1
    avgFirst = 1;
  end

  if avgLast > numFrames
    avgLast = numFrames;
  end

  % local copy of tirfim (matlab mem management means theres still
  % only 1 copy in mem so not wasteful
  tirfIm = appData.tirfIm;

  %calculate the D average
  [D,A framesData] =...
    calculateAveragesCW(tirfIm, avgFirst, avgLast);

  %assign the new avg images
  appData.D = D;
  appData.A = A;
  appData.framesData = framesData;

  %update filters
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
  updateFilters(handles);
  appData = getappdata(handles.figure1, 'appData');
  twotoneData = getappdata(handles.figure1, 'twotoneData');
  twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

  %plot the data
  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
  plotImages(handles);
  appData = getappdata(handles.figure1, 'appData');
  twotoneData = getappdata(handles.figure1, 'twotoneData');
  twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

  setappdata(handles.figure1, 'appData', appData);
  setappdata(handles.figure1, 'twotoneData', twotoneData);
  setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
end

%---------------------------------------------------------
function updateFilters(handles) 
%apply filters & normalisation to the current images
appData = getappdata(handles.figure1, 'appData');
twotoneData = getappdata(handles.figure1, 'twotoneData');
twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');

% bandpass filter
BPdiscDiametre =twotoneData.settings.autoDetectSettings.bandPassKernelDiameter;

%Check the disc diametre is valid
if isnan(BPdiscDiametre)... % is not a number
   || rem(BPdiscDiametre, 1)~=0 ... % is not integer
   || (BPdiscDiametre < 0)
  %dont update and thow a warning
  h = warndlg('BPdisc must be integer >= 0');
  uiwait(h);
elseif appData.movieLoaded==false
  %dont update and thow a warning
  h = warndlg('No movie loaded');
  uiwait(h);
else
  %Retrieve the raw images
  D = appData.D;
  A = appData.A;

  if BPdiscDiametre > 1
    DFiltered = bpass(D,1,BPdiscDiametre);
    AFiltered = bpass(A,1,BPdiscDiametre);
  else  % no low pass filtering only high pass for noise
    DFiltered = bpass(D,1,0);
    AFiltered = bpass(A,1,0);
  end

  %assign the new filtered images
  appData.DFiltered = DFiltered;
  appData.AFiltered = AFiltered;

end

setappdata(handles.figure1, 'appData', appData);
setappdata(handles.figure1, 'twotoneData', twotoneData);
setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);

%---------------------------------------------------------
function plotImages(handles);
%function plotImages(handles);
% Plot the images

appData = getappdata(handles.figure1, 'appData');
twotoneData = getappdata(handles.figure1, 'twotoneData');
twotoneGeneralSetting = getappdata(handles.figure1, 'twotoneGeneralSetting');
%set main gui as current figure
set(0,'CurrentFigure',handles.figure1)
if appData.movieLoaded == true
  %Retrive the images
  if appData.showFilteredImage==1
    %Plot the filtered image
    DIm = appData.DFiltered;
    AIm = appData.AFiltered;
  else %Plot the unfiltered image
    DIm = appData.D;
    AIm = appData.A;
  end

  %D
  subplot(handles.axesD);     
  handles.imageD = imshow(DIm);
  %normalise the image display
  caxis([min(DIm(:)), max(DIm(:))]);
  %get rid of any points alreay plotted
  if isfield(handles, 'scatterD') && ~isempty(handles.scatterD)
    set(handles.scatterD,'Visible','off');
  end
  % if theres any points to plot, show them
  if isfield(appData, 'pointsD')  && ~isempty(appData.pointsD)

    hold on;
    handles.scatterD = scatter(appData.pointsD(:,1),appData.pointsD(:,2), 70,'r','o');
    hold off;
  end


  %A
  subplot(handles.axesA);
  handles.imageA = imshow(AIm);
  caxis([min(AIm(:)), max(AIm(:))]);
  %get rid of any points alreay plotted
  if isfield(handles, 'scatterA') && ~isempty(handles.scatterA)
    set(handles.scatterA,'Visible','off');
  end
  if isfield(appData, 'pointsA') && ~isempty(appData.pointsA)

    hold on;
    handles.scatterA = scatter(appData.pointsA(:,1),appData.pointsA(:,2), 70,'r','o');
    hold off;
  end

  %LINKED POINTS
  %if channels have been associated plot that too
  % if theres any points to plot, show them
  if isfield(appData, 'filteredClusters') && ~isempty(appData.filteredClusters)
    %D
    subplot(handles.axesD);
    hold on;
    appData.handleFilteredD = scatter(appData.Dlinkedpos(:,1),appData.Dlinkedpos(:,2), 120,'r','x');
    hold off;
    %A
    subplot(handles.axesA);
    hold on;
    appData.handleFilteredA = scatter(appData.Alinkedpos(:,1),appData.Alinkedpos(:,2), 120,'r','x');
    hold off;

  end

  % set(handles.figure1, 'ColorMap', colormap(hsv))
  % update the old guidata handles with the new one
  % for some reason you have to reference it as handles.figure1
  % not entirely sure why

end

setappdata(handles.figure1, 'appData', appData);
setappdata(handles.figure1, 'twotoneData', twotoneData);
setappdata(handles.figure1, 'twotoneGeneralSetting',twotoneGeneralSetting);
guidata(handles.figure1,handles);

%-----------------------------------------------------------------------
%-----------------------------------------------------------------------
function plotClusterResults(clusters,distanceDistribution)
%function h1 = plotClusterResults(clusters,distanceDistribution)
%plot the cluster distance distribution
eccCol = find(strcmp(clusters(1).paramNames,'eccentricity'));
sColX  = find(strcmp(clusters(1).paramNames,'sx'));
sColY  = find(strcmp(clusters(1).paramNames,'sy'));

subplot(2,2,1);
[n,x]=hist( distanceDistribution, numel(distanceDistribution)/2);
stairs(x,n);
title('Cluster Distance Distribution');xlabel('r (pix.)');ylabel('Freq per bin');
xlim([0 10]);
yMax= 1.5*max(n(2:end));%completely heuristic but it should do
ylim([0 yMax]);

%eccentricity
subplot(2,2,3);
nCluster= numel(clusters);
ecc =  {[],[]};
sX  =  {[],[]};
sY  =  {[],[]};
for i = 1:nCluster
  ecc{1} = [ecc{1};clusters(i).dparams(:,eccCol)];
  ecc{2} = [ecc{2};clusters(i).aparams(:,eccCol)];
  sX{1}  = [sX{1}; clusters(i).dparams(:,sColX)];
  sX{2}  = [sX{2}; clusters(i).aparams(:,sColX)];
  sY{1}  = [sY{1}; clusters(i).dparams(:,sColY)];
  sY{2}  = [sY{2}; clusters(i).aparams(:,sColY)];
end

[eDn,eDx]=hist(ecc{1},nCluster/2);
[eAn,eAx]=hist(ecc{2},nCluster/2);
hold off;
stairs(eDx,eDn,'g');
hold all;
stairs(eAx,eAn,'k');
ylabel('Freq per bin');
xlabel('\epsilon')
title('Eccentricity distribution');
xlim([0 1]);

%widths
subplot(2,2,[2 4]);
cla;
hold all;
legendList={};
if ~all(isnan(sX{1}))
  plot(sX{1},sY{1},'g.');
  legendList={legendList{:},'D'};
end

if ~all(isnan(sX{2}))
  plot(sX{2},sY{2},'k.');
  legendList={legendList{:},'A'};
end

title('width distribution');
xlabel('s_{min}');
ylabel('s_{max}');

legend(legendList,'Location','NorthEast');


%-------------------------------------------------------------------------------------------
function isOK = isImageLimitOK(imageLim,currentImSize)
%X axis is NAXIS2. Y axis is NAXIS1.
%currentImSize is [Y,X]
% imageLim is [Ymin, Ymax, Xmin, Xmax] 

if any(any(imageLim(:) < 1)) ...
    || any(any(imageLim(1:2,1:2) > currentImSize(1)))  ...
    || any(any(imageLim(1:2,1) >= imageLim(1:2,2) )) ...
    || any(any(imageLim(1:2,3:4) > currentImSize(2))) ...
    || any(any(imageLim(1:2,3) >= imageLim(1:2,4) ))
  isOK = false;
else
  isOK = true;
end
